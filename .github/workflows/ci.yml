name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for secrets
        run: |
          if command -v git-secrets &> /dev/null; then
            git secrets --scan
          else
            echo "git-secrets not available, skipping secret scan"
          fi

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint
        run: npm run lint

      - name: Check for TODO/FIXME comments
        run: |
          echo "Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" src/ --exclude-dir=node_modules; then
            echo "Found TODO/FIXME comments. Please address these before merging."
            exit 1
          fi

      - name: Check for @ts-ignore comments
        run: |
          echo "Checking for @ts-ignore comments..."
          if grep -r "@ts-ignore" src/ --exclude-dir=node_modules; then
            echo "Found @ts-ignore comments. Please fix type issues instead."
            exit 1
          fi

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests with coverage
        run: npm test -- --coverage --watchAll=false

      - name: Check coverage thresholds
        run: |
          echo "Checking test coverage..."
          COVERAGE=$(npm test -- --coverage --watchAll=false --coverageReporters=text-summary | grep "Statements" | awk '{print $3}' | sed 's/%//')
          echo "Current coverage: $COVERAGE%"
          if [ "$COVERAGE" -lt 80 ]; then
            echo "Coverage $COVERAGE% is below 80% threshold"
            exit 1
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          if [ -d ".next" ]; then
            SIZE=$(du -sh .next | awk '{print $1}')
            echo "Bundle size: $SIZE"
            # Add size limit check here if needed
          fi

  ferpa-compliance:
    name: FERPA Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run FERPA compliance tests
        run: npm test -- --testPathPattern="ferpa|parent|audit" --watchAll=false

      - name: Check for FERPA compliance markers
        run: |
          echo "Checking FERPA compliance implementation..."
          if ! grep -r "FERPA" src/ --include="*.ts" --include="*.tsx" | grep -v "test" | grep -q "compliance"; then
            echo "Warning: No FERPA compliance markers found in source code"
          fi

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check documentation accuracy
        run: |
          echo "Checking documentation for accuracy..."
          # Check if README has production warnings
          if ! grep -q "NOT PRODUCTION READY" README.md; then
            echo "Warning: README.md missing production warning"
          fi
          
          # Check if KNOWN_ISSUES.md exists
          if [ ! -f "docs/KNOWN_ISSUES.md" ]; then
            echo "Warning: KNOWN_ISSUES.md not found"
          fi
          
          # Check for false claims in documentation
          if grep -r "production.ready\|FERPA.compliant\|enterprise.grade" docs/ --include="*.md" | grep -v "NOT"; then
            echo "Warning: Found potentially false claims in documentation"
            exit 1
          fi

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here when available
          echo "Integration tests not yet implemented"

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, quality, test, build, ferpa-compliance, documentation]
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add deployment commands here when staging environment is ready
          echo "Staging deployment not yet configured"

  notify:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [security, quality, test, build, ferpa-compliance, documentation]
    if: failure()
    steps:
      - name: Notify failure
        run: |
          echo "CI pipeline failed. Please check the logs and fix the issues."
          # Add notification logic here (Slack, email, etc.) 